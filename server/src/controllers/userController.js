// ======================================================================
// User Controller â€“ Express Handlers for User Actions and Preferences
// ======================================================================
//
// Purpose:
// This controller handles all user-related operations at the application level.
// It serves as the bridge between the route definitions and the user model logic.
// 
// Includes handlers for:
// - User creation and retrieval
// - Managing preferences and liked recipes
// - Handling fridge scans and item updates
// - Storing AI-generated recipes and fridge snapshots
//
// Connected Models:
// - userModel.js (Firestore logic for user data)
// - fridgeController.js (image scanning logic)
//
// All routes using these handlers are typically protected with Firebase token verification.

const { 
  createUser, 
  getUserById, 
  addLikedRecipe, 
  addFridgeSnapshot, 
  addGeneratedRecipe, 
  updatePreferences, 
  updateLastScanStatus,
  saveFridgeItemsToUser,
  saveFinalFridgeSnapshot,
  addItemToFridge,
  deleteFridgeItem
} = require('../models/userModel');

const { scanFridgeHandler } = require('../controllers/fridgeController');
const { getUserProfile } = require('../models/userModel');

// Handles user creation during sign-up
const createUserHandler = async (req, res) => {
  const { uid, name, email } = req.body;
  try {
    await createUser({ uid, name, email });
    res.status(201).json({ message: 'User created successfully' });
  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Retrieves a user's profile by UID (only if requesting user matches)
const getUser = async (req, res) => {
  if (req.params.uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }
  try {
    const user = await getUserById(req.params.uid);
    if (!user) return res.status(404).json({ message: 'User not found' });

    const { preferences, likedRecipes, fridgeHistory, aiFridgeItems } = user;
    const lastFridgeScan = fridgeHistory?.[fridgeHistory.length - 1]?.timestamp || null;

    res.status(200).json({
      uid: user.uid,
      email: user.email,
      preferences,
      likedRecipes,
      lastFridgeScan,
      aiFridgeItems,
    });
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Adds a liked recipe ID to the user's document
const addLikedRecipeHandler = async (req, res) => {
  if (req.params.uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }
  const { recipeId } = req.body;
  try {
    await addLikedRecipe(req.params.uid, recipeId);
    res.status(200).json({ message: 'Recipe liked successfully' });
  } catch (error) {
    console.error('Error adding liked recipe:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Stores a snapshot of the fridge contents (items + image URL)
const addFridgeSnapshotHandler = async (req, res) => {
  if (req.params.uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }

  const { detectedItems, imageUrl } = req.body;

  try {
    if (!detectedItems || !Array.isArray(detectedItems)) {
      return res.status(400).json({ message: 'Invalid detected items' });
    }

    await addFridgeSnapshot(req.params.uid, detectedItems, imageUrl);
    res.status(200).json({ message: 'Fridge snapshot added successfully' });
  } catch (error) {
    console.error('Error adding fridge snapshot:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Stores a reference to a recipe generated by AI for the user
const addGeneratedRecipeHandler = async (req, res) => {
  if (req.params.uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }
  const { recipeId } = req.body;
  try {
    await addGeneratedRecipe(req.params.uid, recipeId);
    res.status(200).json({ message: 'Generated recipe saved successfully' });
  } catch (error) {
    console.error('Error saving generated recipe:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Updates the user's saved dietary and app preferences
const updatePreferencesHandler = async (req, res) => {
  const { uid } = req.params;
  if (uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }

  try {
    const preferences = req.body.preferences;
    if (!preferences || typeof preferences !== 'object') {
      return res.status(400).json({ message: 'Invalid preferences data' });
    }

    await updatePreferences(uid, preferences);
    res.status(200).json({ message: 'Preferences updated successfully' });
  } catch (error) {
    console.error('Error updating preferences:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Adds a single item to the aiFridgeItems list
const addItemToFridgeHandler = async (req, res) => {
  const { uid } = req.params;
  const { item } = req.body;
  if (uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }

  try {
    await addItemToFridge(uid, item);
    res.status(200).json({ message: 'Item added to aiFridgeItems' });
  } catch (error) {
    console.error('Error adding item to aiFridgeItems:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Removes a single item from the aiFridgeItems list
const deleteFridgeItemHandler = async (req, res) => {
  const { uid } = req.params;
  const { item } = req.body;
  if (uid !== req.user.uid) {
    return res.status(403).json({ message: 'Access denied' });
  }

  try {
    await deleteFridgeItem(uid, item);
    res.status(200).json({ message: 'Item removed from aiFridgeItems' });
  } catch (error) {
    console.error('Error removing item from aiFridgeItems:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Saves the current aiFridgeItems list to the user document
const saveFridgeItemsHandler = async (req, res) => {
  try {
    const uid = req.user?.uid;
    const { items } = req.body;
    if (!uid || !Array.isArray(items)) {
      return res.status(400).json({ message: 'Invalid data' });
    }

    await saveFridgeItemsToUser(uid, items);
    res.status(200).json({ message: 'aiFridgeItems saved' });
  } catch (error) {
    console.error('Error saving aiFridgeItems:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Saves the final fridge snapshot (image + items) to the user document
const saveFinalFridgeSnapshotHandler = async (req, res) => {
  try {
    const uid = req.user?.uid;
    const { items, imageUrl } = req.body;
    if (!uid || !Array.isArray(items)) {
      return res.status(400).json({ message: 'Invalid data' });
    }

    await saveFinalFridgeSnapshot(uid, items, imageUrl);
    res.status(200).json({ message: 'Final snapshot saved' });
  } catch (error) {
    console.error('Error saving final snapshot:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Returns the current user's profile using UID from the token
const getUserProfileHandler = async (req, res) => {
  try {
    const uid = req.user?.uid;
    const profile = await getUserProfile(uid);
    if (!profile) return res.status(404).json({ message: 'User not found' });

    res.status(200).json(profile);
  } catch (error) {
    console.error('Error fetching user profile:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

module.exports = {
  createUser: createUserHandler,
  getUser,
  addLikedRecipe: addLikedRecipeHandler,
  addFridgeSnapshot: addFridgeSnapshotHandler,
  addGeneratedRecipe: addGeneratedRecipeHandler,
  updatePreferences: updatePreferencesHandler,
  scanFridge: scanFridgeHandler,
  addItemToFridgeHandler,
  deleteFridgeItemHandler,
  saveFridgeItemsHandler,
  saveFinalFridgeSnapshotHandler,
  getUserProfileHandler
};
